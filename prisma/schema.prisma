// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  username   String     @unique
  name       String?
  surname    String?
  userStatus UserStatus
  is_student Boolean
  is_teacher Boolean
  Student    Student?   @relation(fields: [studentId], references: [id])
  studentId  Int?
  Teacher    Teacher?   @relation(fields: [teacherId], references: [id])
  teacherId  Int?
}

model Student {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  username   String     @unique
  name       String?
  surname    String?
  userStatus UserStatus
  UniGroup   UniGroup   @relation(fields: [uniGroupId], references: [id])
  uniGroupId Int
  User       User[]
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Teacher {
  id         Int        @id @default(autoincrement())
  name       String
  surname    String
  email      String     @unique
  password   String
  subjects   Subject    @relation(fields: [subjectId], references: [id])
  subjectId  Int
  userStatus UserStatus
  User       User[]
}

model Subject {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  credit      Int
  teachers    Teacher[]
  questions   Question[]
  UniGroup    UniGroup?  @relation(fields: [uniGroupId], references: [id])
  uniGroupId  Int?
}

model Question {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId Int
  Answer    Answer[]
}

model UniGroup {
  id        Int       @id @default(autoincrement())
  name      String
  students  Student[]
  subjects  Subject[]
  Faculty   Faculty?  @relation(fields: [facultyId], references: [id])
  facultyId Int?
}

model Faculty {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  uniGroup    UniGroup[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  answer     String
  is_correct Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}
